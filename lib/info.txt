# ARQUITECTURA - CONCEPTOS IMPORTANTES


Entities / Entidades: Objetos que son y serán idénticos entre diferentes aplicaciones.

Datasources / Orígenes de Datos: Son las fuentes de datos, a la aplicación no le debe de importar de dónde vienen los datos.
                Abstractos: Contiene las reglas de negocio que todas las implementaciones deben de seguir.
                Implementaciones: Contiene el código que llama a la API.

Repositories / Repositorios: Llaman a los datasources, deben de ser flexibles para poder modificarlos/cambiarlos sin afectar a la aplicación. (Reciben uno/varios datasources como argumentos/parámetros).
                Abstractos: Interfaces o clases base que definen las operaciones generales de los repositorios, estandarizando su comportamiento.
                Implementaciones: Implementan las abstracciones, conteniendo el código específico para interactuar con los datasources.

Provider / Gestor de Estado: Sirve de puente entre la presentación y los repositorios. (También realizan los cambios visuales en los Widgets).



LÓGICA DE NEGOCIO: Screens > Widgets > Providers > Repositories > Datasources



# INFORMACIÓN DE LOS DIRECTORIOS Y CLASES

CONFIG: Configuración de la aplicación.
  constants: Este directorio contiene las variables de entorno.
      environment.dart: Contiene las variables de entorno del archivo (.env).
  helpers: Este directorio contiene ayudas para el código.
      formats.dart: Contiene conversiones de decimales utilizando el paquete (intl).
  router: Este directorio contiene el sistema de configuración de rutas.
      app_router.dart: Contiene las rutas de la aplicación, se utiliza la libreria externa (go_router).
  theme: Este directorio contiene el tema de la aplicación.
      app_theme.dart: Contiene el tema de la aplicación.

DOMAIN: Reglas de la aplicación.
  datasources: En este directorio se definen las reglas que una fuente de información debe de tener para poder utilizarla en la aplicación. (Aquí no está el código que cumple con la funcionalidad de obtener los datos).
      actors_datasource.dart: Contiene las reglas que debe de cumplir (actor_datasource_impl.dart).
      movies_datasource.dart: Contiene las reglas que debe de cumplir (movie_datasource_impl.dart).
  entities: Las clases raíz a partir de las cuales se crean las clases que se utilizan en la aplicación. (Generalmente es la representación de un objeto de la vida real, usado para referirse a tablas en una base de datos)
      actor.dart: Define el formato que se utilizará para los actores en la aplicación. El mapper emplea esta clase para transformar los datos y adaptarlos al formato esperado por esta clase.
      movie.dart: Define el formato que se utilizará para las películas en la aplicación. El mapper emplea esta clase para transformar los datos y adaptarlos al formato esperado por esta clase.
  repositories: Se llama al repositorio para acceder al datasource, este directorio facilita el mantenimiento de los datasources. (Aquí no está el código que cumple con la funcionalidad de obtener los datos).
      actors_repository.dart: Desde este repositorio se accede a (actors_datasource.dart) para obtener y utilizar las reglas definidas en este archivo.
      movies_repository.dart: Desde este repositorio se accede a (movies_datasource.dart) para obtener y utilizar las reglas definidas en este archivo.

INFRASTRUCTURE: Infraestructura de la aplicación.
  datasources: Las implementaciones de los datasources, aquí se realizan las peticiones HTTP para obtener la información.
      actor_datasource_impl.dart: Obtiene actores de una película desde la API de TMDB, convierte los datos en objetos Actor usando ActorMapper, y devuelve una lista de actores asociados con la película.
      movie_datasource_impl.dart: Se conecta a la API de TheMovieDB (TMDB) para obtener películas en cartelera.
                                  Utiliza Dio para hacer la solicitud HTTP, filtra las películas sin póster, y convierte los datos en objetos Movie usando MovieMapper, devolviendo una lista de películas.
  mappers: El mapper recibe los datos y los transforma al formato que la aplicación necesita para utilizarlos. (En caso de que la API cambie, solo se necesitan cambiar los mappers).
      actor_mapper.dart: Convierte un objeto Cast (del modelo de datos de la API) en un objeto Actor (de la entidad de dominio). Si el actor tiene una imagen de perfil (profilePath), se construye la URL completa;
      movie_mapper.dart: Convierte objetos de tipo MovieMovieDB en objetos Movie para adaptarlos al formato utilizado en la aplicación.
                         Este mapeo incluye ajustes en las URLs de las imágenes y la conversión de los IDs de géneros a cadenas de texto.
  models: Tienen el objetivo de tipar una respuesta HTTP, ayuda a hacer lucir de cierta manera la información que se recibe de la API. (Es la representación de la entidad y sirve para trabajar fácilmente con el mapper).
      moviedb: Directorio que contiene los modelos de TheMovieDB (TMDB).
          credits_response.dart: El programa define dos clases:
                                 CreditsResponse: Maneja los créditos de una película, con un ID y listas de actores (cast) y equipo técnico (crew).
                                 Cast: Representa a una persona del reparto o equipo, con detalles como nombre, departamento y rol. Ambas clases incluyen métodos para convertir entre JSON y objetos.
          movie_details.dart: Es una representación detallada de una película. Esta clase contiene varias propiedades que describen los distintos aspectos de una película, como su título, género...
          movie_moviedb.dart: Representa los datos de una película obtenida de la API de TheMovieDB (TMDB). Incluye atributos como el título, fecha de lanzamiento, sinopsis, y otros detalles relevantes.
                              Además, tiene métodos para convertir datos JSON en una instancia de la clase y viceversa, facilitando la serialización y deserialización de datos de películas.
          moviedb_response.dart: Representa la respuesta de una API de películas, conteniendo información sobre paginación y una lista de películas (results).
                                 También incluye un rango de fechas (Dates) para los lanzamientos de películas. Los métodos permiten convertir los datos de JSON a objetos de estas clases y viceversa.
                                 La clase Dates maneja las fechas mínima y máxima del rango de lanzamiento de las películas en la respuesta.
  repositories: Las implementaciones de los repositorios, el repositorio recibe los datos del datasource.
      actor_datasource_impl.dart: Implementa el repositorio ActorsRepository, delegando la obtención de actores de una película al ActorsDatasource proporcionado.
                                  Simplemente llama al método getActorByMovie del datasource y devuelve la lista de actores.
      movie_repository_impl.dart: Es una implementación de MoviesRepository que utiliza un MoviesDatasource para obtener datos de películas.
                                  Su función principal es delegar la solicitud de películas en cartelera al datasource, devolviendo los resultados como una lista de objetos Movie.

PRESENTATION: Capa de presentación de la aplicación.
  delegates: Este directorio contiene los delegates de la aplicación.
      search_movies_delegate.dart: Contiene el código del delegate para la búsqueda de peliculas.
  providers: Son el puente de conexión entre las capas de la infraestructura y la capa de presentación. (Los widgets deben de interactuar con el/los providers para que estos interactuen con el usuario final).
      actors: Directorio que contiene las conexiones entre la infraestructura y la presentación de los actores.
          actors_provider.dart: Gestiona un mapa de actores por película. La clase ActorsMovieProvider obtiene actores para una película específica usando un callback (getActors) y actualiza el estado si aún no se han cargado.
                                      El proveedor se conecta al repositorio de actores y permite acceder a la lista de actores por película.
          actors_repository_provider.dart: Usando Riverpod, proporciona una instancia de ActorRepositoryImpl, que a su vez utiliza ActorDatasourceImpl para obtener datos de actores desde la API.
      loaders: Directorio que contiene las conexiones entre la infraestructura y la presentación de las cargas.
          screen_loader_provider.dart: Indica si alguna de las listas de películas principales aún está vacía, retornando true si es así, o false si todas están cargadas.
      movies: Directorio que contiene las conexiones entre la infraestructura y la presentación de las películas.
          movies_details_provider.dart: Gestiona un mapa de películas en el estado. Permite cargar detalles de una película a partir de su ID usando un callback proporcionado, y actualiza el estado si la película no está ya presente.
          movies_provider.dart: El nowPlayingMoviesProvider es un proveedor de Riverpod que utiliza MoviesNotifier para gestionar y actualizar una lista de películas en cartelera, cargando nuevas películas de manera paginada.
          movies_repository_provider.dart: Es un proveedor de Riverpod que crea e inicializa una instancia de MovieRepositoryImpl usando MovieDatasourceImpl.
          movies_slideshow_provider.dart: El moviesSlideshowProvider es un proveedor que devuelve las primeras seis películas en cartelera observando el nowPlayingMoviesProvider. Si no hay películas, devuelve una lista vacía.
      search: Directorio que contiene las conexiones entre la infraestructura y la presentación del SearchDelegate.
          search_movies_provider: La clase implementa un sistema de búsqueda de películas usando Riverpod en Flutter. Almacena la consulta de búsqueda del usuario y maneja el estado de la lista de películas resultante.
                                  La clase SearchedMoviesNotifier ejecuta la búsqueda de películas y actualiza tanto la consulta como la lista de resultados.
  screens: Este directorio contiene las pantallas de la aplicación.
      movies: Directorio que contiene las pantallas de las películas.
          home_screen.dart: La pantalla principal de las películas.
          movie_screen: La pantalla de cada película individual.
  views: Este directorio contiene las vistas de las pantallas de la aplicación.
      movies: Este directorio contiene las vistas de las pantallas de las películas.
          categories_view.dart: La vista de la pantalla de categorías.
          favorites_view.dart: La vista de la pantalla de favoritos.
          home_view.dart: La vista de la pantalla de inicio.
  widgets: Este directorio contiene los widgets personalizados de la aplicación.
      movies: Este directorio contiene los widgets específicos de las pantallas de las películas.
          movies_listwiew.dart: Este widget representa el deslizador de tarjetas horizontal de las peliculas "En cines".
          movies_slideshow.dart: Este widget representa el deslizador de tarjetas, utiliza la librería externa (card_swiper)
      shared: Este directorio contiene los widgets genéricos que se utilizan en toda la aplicación.
          custom_appbar.dart: Este widget representa la barra superior de la aplicación.
          custom_navegation_bar.dart: Este widget representa la barra de navegación de la aplicación.
          full_screen_loader.dart: Este widget representa el indicador de carga general de la aplicación.